// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CKZhD2BVpe8oYNyjz4EUo
// Component: sdZdmGowFd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_dapp_rta_vote.module.css"; // plasmic-import: 7CKZhD2BVpe8oYNyjz4EUo/projectcss
import * as sty from "./PlasmicButton.module.css"; // plasmic-import: sdZdmGowFd/css

export type PlasmicButton__VariantMembers = {
  color: "primary" | "secondary" | "offwhite" | "transparent";
  loading: "loading";
};

export type PlasmicButton__VariantsArgs = {
  color?: SingleChoiceArg<"primary" | "secondary" | "offwhite" | "transparent">;
  loading?: SingleBooleanChoiceArg<"loading">;
};

type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "color",
  "loading"
);

export type PlasmicButton__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>("children");

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultButtonProps {
  children?: React.ReactNode;
  color?: SingleChoiceArg<"primary" | "secondary" | "offwhite" | "transparent">;
  loading?: SingleBooleanChoiceArg<"loading">;
  className?: string;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  dataFetches?: PlasmicButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__loading]: hasVariant(variants, "loading", "loading"),
      })}
    >
      <div className={classNames(defaultcss.all, sty.box___22Ni4)}>
        <div
          className={classNames(defaultcss.all, sty.box__bgnWk, {
            [sty.box__color_offwhite__bgnWkzCsOi]: hasVariant(
              variants,
              "color",
              "offwhite"
            ),
            [sty.box__color_secondary__bgnWKsJ1Fy]: hasVariant(
              variants,
              "color",
              "secondary"
            ),
            [sty.box__color_transparent__bgnWKrMKn]: hasVariant(
              variants,
              "color",
              "transparent"
            ),
            [sty.box__loading__bgnWk8DnJy]: hasVariant(
              variants,
              "loading",
              "loading"
            ),
          })}
        >
          {(hasVariant(variants, "loading", "loading") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Button Label",
                value: args.children,
                className: classNames(sty.slotChildren, {
                  [sty.slotChildren__color_offwhite]: hasVariant(
                    variants,
                    "color",
                    "offwhite"
                  ),
                  [sty.slotChildren__color_secondary]: hasVariant(
                    variants,
                    "color",
                    "secondary"
                  ),
                  [sty.slotChildren__color_transparent]: hasVariant(
                    variants,
                    "color",
                    "transparent"
                  ),
                  [sty.slotChildren__loading]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),
                }),
              })
            : null}
          {(hasVariant(variants, "loading", "loading") ? true : false) ? (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__knQd,
                {
                  [sty.box__loading__knQd8DnJy]: hasVariant(
                    variants,
                    "loading",
                    "loading"
                  ),
                }
              )}
            >
              {hasVariant(variants, "loading", "loading")
                ? "Loading..."
                : "Enter some text"}
            </div>
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButton__Fetches;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
