// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CKZhD2BVpe8oYNyjz4EUo
// Component: 4Bd4Yhsd_bl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_dapp_rta_vote.module.css"; // plasmic-import: 7CKZhD2BVpe8oYNyjz4EUo/projectcss
import * as sty from "./PlasmicStackPage.module.css"; // plasmic-import: 4Bd4Yhsd_bl/css

export type PlasmicStackPage__VariantMembers = {
  tab: "_0" | "_1";
};

export type PlasmicStackPage__VariantsArgs = {
  tab?: SingleChoiceArg<"_0" | "_1">;
};

type VariantPropType = keyof PlasmicStackPage__VariantsArgs;
export const PlasmicStackPage__VariantProps = new Array<VariantPropType>("tab");

export type PlasmicStackPage__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicStackPage__ArgsType;
export const PlasmicStackPage__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicStackPage__OverridesType = {
  root?: p.Flex<"div">;
  toolbar?: p.Flex<"div">;
  backToHome?: p.Flex<"a"> & Partial<LinkProps>;
  content?: p.Flex<"div">;
};

export interface DefaultStackPageProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  tab?: SingleChoiceArg<"_0" | "_1">;
  className?: string;
}

function PlasmicStackPage__RenderFunc(props: {
  variants: PlasmicStackPage__VariantsArgs;
  args: PlasmicStackPage__ArgsType;
  overrides: PlasmicStackPage__OverridesType;
  dataFetches?: PlasmicStackPage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__tab__0]: hasVariant(variants, "tab", "_0"),
      })}
    >
      <div className={classNames(defaultcss.all, sty.box__zibpk)}>
        <div
          data-plasmic-name={"toolbar"}
          data-plasmic-override={overrides.toolbar}
          className={classNames(defaultcss.all, sty.toolbar, {
            [sty.toolbar__tab__0]: hasVariant(variants, "tab", "_0"),
          })}
        >
          <div className={classNames(defaultcss.all, sty.box__icgMe)}>
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"backToHome"}
              data-plasmic-override={overrides.backToHome}
              hasGap={true}
              className={classNames(defaultcss.all, sty.backToHome)}
              component={Link}
              href={"/" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__k7Yu
                )}
              >
                {"Back to home"}
              </div>
            </p.Stack>

            <div className={classNames(defaultcss.all, sty.box__uLzX)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div className={classNames(defaultcss.all, sty.box__b6G9V)} />
                ),

                value: args.slot,
              })}
            </div>
          </div>
        </div>

        <div
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          className={classNames(defaultcss.all, sty.content, {
            [sty.content__tab__0]: hasVariant(variants, "tab", "_0"),
          })}
        >
          <div className={classNames(defaultcss.all, sty.box__mzAs)}>
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.children,
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "toolbar", "backToHome", "content"],
  toolbar: ["toolbar", "backToHome"],
  backToHome: ["backToHome"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  toolbar: "div";
  backToHome: "a";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStackPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStackPage__VariantsArgs;
    args?: PlasmicStackPage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicStackPage__Fetches;
  } & Omit<PlasmicStackPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStackPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStackPage__ArgProps,
      internalVariantPropNames: PlasmicStackPage__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicStackPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStackPage";
  } else {
    func.displayName = `PlasmicStackPage.${nodeName}`;
  }
  return func;
}

export const PlasmicStackPage = Object.assign(
  // Top-level PlasmicStackPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    toolbar: makeNodeComponent("toolbar"),
    backToHome: makeNodeComponent("backToHome"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicStackPage
    internalVariantProps: PlasmicStackPage__VariantProps,
    internalArgProps: PlasmicStackPage__ArgProps,
  }
);

export default PlasmicStackPage;
/* prettier-ignore-end */
