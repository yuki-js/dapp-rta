// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CKZhD2BVpe8oYNyjz4EUo
// Component: bnO-AW974wUz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Tab from "../../Tab"; // plasmic-import: 4sUtTUrWnT/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_dapp_rta_vote.module.css"; // plasmic-import: 7CKZhD2BVpe8oYNyjz4EUo/projectcss
import * as sty from "./PlasmicTabPage.module.css"; // plasmic-import: bnO-AW974wUz/css

export type PlasmicTabPage__VariantMembers = {
  tab: "_0" | "_1";
};

export type PlasmicTabPage__VariantsArgs = {
  tab?: SingleChoiceArg<"_0" | "_1">;
};

type VariantPropType = keyof PlasmicTabPage__VariantsArgs;
export const PlasmicTabPage__VariantProps = new Array<VariantPropType>("tab");

export type PlasmicTabPage__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTabPage__ArgsType;
export const PlasmicTabPage__ArgProps = new Array<ArgPropType>("children");

export type PlasmicTabPage__OverridesType = {
  root?: p.Flex<"div">;
  tabbar?: p.Flex<"div">;
  tabs?: p.Flex<"div">;
  content?: p.Flex<"div">;
};

export interface DefaultTabPageProps {
  children?: React.ReactNode;
  tab?: SingleChoiceArg<"_0" | "_1">;
  className?: string;
}

function PlasmicTabPage__RenderFunc(props: {
  variants: PlasmicTabPage__VariantsArgs;
  args: PlasmicTabPage__ArgsType;
  overrides: PlasmicTabPage__OverridesType;
  dataFetches?: PlasmicTabPage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__tab__0]: hasVariant(variants, "tab", "_0")
      })}
    >
      <div className={classNames(defaultcss.all, sty.box__efLvO)}>
        <div
          data-plasmic-name={"tabbar"}
          data-plasmic-override={overrides.tabbar}
          className={classNames(defaultcss.all, sty.tabbar, {
            [sty.tabbar__tab__0]: hasVariant(variants, "tab", "_0")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"tabs"}
            data-plasmic-override={overrides.tabs}
            hasGap={true}
            className={classNames(defaultcss.all, sty.tabs)}
          >
            <Tab
              className={classNames("__wab_instance", sty.tab__uvq57, {
                [sty.tab__tab__0__uvq57RmsaT]: hasVariant(variants, "tab", "_0")
              })}
              linkTo={"/start" as const}
              selected={
                hasVariant(variants, "tab", "_0")
                  ? ("selected" as const)
                  : undefined
              }
            />

            <Tab
              className={classNames("__wab_instance", sty.tab__ydc96, {
                [sty.tab__tab__1__ydc96W7Irv]: hasVariant(variants, "tab", "_1")
              })}
              linkTo={"/vote" as const}
              selected={
                hasVariant(variants, "tab", "_1")
                  ? ("selected" as const)
                  : undefined
              }
            >
              {"Vote"}
            </Tab>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          className={classNames(defaultcss.all, sty.content, {
            [sty.content__tab__0]: hasVariant(variants, "tab", "_0")
          })}
        >
          <div className={classNames(defaultcss.all, sty.box__bZwY6)}>
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.children
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tabbar", "tabs", "content"],
  tabbar: ["tabbar", "tabs"],
  tabs: ["tabs"],
  content: ["content"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tabbar: "div";
  tabs: "div";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTabPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTabPage__VariantsArgs;
    args?: PlasmicTabPage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTabPage__Fetches;
  } & Omit<PlasmicTabPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTabPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTabPage__ArgProps,
      internalVariantPropNames: PlasmicTabPage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTabPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTabPage";
  } else {
    func.displayName = `PlasmicTabPage.${nodeName}`;
  }
  return func;
}

export const PlasmicTabPage = Object.assign(
  // Top-level PlasmicTabPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabbar: makeNodeComponent("tabbar"),
    tabs: makeNodeComponent("tabs"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicTabPage
    internalVariantProps: PlasmicTabPage__VariantProps,
    internalArgProps: PlasmicTabPage__ArgProps
  }
);

export default PlasmicTabPage;
/* prettier-ignore-end */
