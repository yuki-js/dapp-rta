// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7CKZhD2BVpe8oYNyjz4EUo
// Component: ntX9agb1NR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import TabPage from "../../TabPage"; // plasmic-import: bnO-AW974wUz/component
import Input from "../../Input"; // plasmic-import: 8ig3uWjRld/component
import Button from "../../Button"; // plasmic-import: sdZdmGowFd/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_dapp_rta_vote.module.css"; // plasmic-import: 7CKZhD2BVpe8oYNyjz4EUo/projectcss
import * as sty from "./PlasmicStart.module.css"; // plasmic-import: ntX9agb1NR/css

export type PlasmicStart__VariantMembers = {};

export type PlasmicStart__VariantsArgs = {};
type VariantPropType = keyof PlasmicStart__VariantsArgs;
export const PlasmicStart__VariantProps = new Array<VariantPropType>();

export type PlasmicStart__ArgsType = {};
type ArgPropType = keyof PlasmicStart__ArgsType;
export const PlasmicStart__ArgProps = new Array<ArgPropType>();

export type PlasmicStart__OverridesType = {
  root?: p.Flex<"div">;
  tabPage?: p.Flex<typeof TabPage>;
  title?: p.Flex<typeof Input>;
  deadline?: p.Flex<typeof Input>;
  next?: p.Flex<typeof Button>;
};

export interface DefaultStartProps {
  dataFetches: PlasmicStart__Fetches;
}

function PlasmicStart__RenderFunc(props: {
  variants: PlasmicStart__VariantsArgs;
  args: PlasmicStart__ArgsType;
  overrides: PlasmicStart__OverridesType;
  dataFetches?: PlasmicStart__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Start Poll"}</title>
        <meta key="og:title" property="og:title" content={"Start Poll"} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <TabPage
            data-plasmic-name={"tabPage"}
            data-plasmic-override={overrides.tabPage}
            className={classNames("__wab_instance", sty.tabPage)}
            tab={"_0" as const}
          >
            <Input
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames("__wab_instance", sty.title)}
              placeholder={"Type here..." as const}
              title={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__mXcKe
                  )}
                >
                  {"Vote title"}
                </div>
              }
            />

            <Input
              data-plasmic-name={"deadline"}
              data-plasmic-override={overrides.deadline}
              className={classNames("__wab_instance", sty.deadline)}
              placeholder={
                "In UNIX timestamp, default to now + 1 weeks" as const
              }
              title={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__bb0Sf
                  )}
                >
                  {"Deadline"}
                </div>
              }
            />

            <div className={classNames(defaultcss.all, sty.box__zbs4D)}>
              <Button
                data-plasmic-name={"next"}
                data-plasmic-override={overrides.next}
                className={classNames("__wab_instance", sty.next)}
              >
                {"Create"}
              </Button>
            </div>
          </TabPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tabPage", "title", "deadline", "next"],
  tabPage: ["tabPage", "title", "deadline", "next"],
  title: ["title"],
  deadline: ["deadline"],
  next: ["next"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tabPage: typeof TabPage;
  title: typeof Input;
  deadline: typeof Input;
  next: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStart__VariantsArgs;
    args?: PlasmicStart__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicStart__Fetches;
  } & Omit<PlasmicStart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStart__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStart__ArgProps,
      internalVariantPropNames: PlasmicStart__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicStart__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStart";
  } else {
    func.displayName = `PlasmicStart.${nodeName}`;
  }
  return func;
}

export const PlasmicStart = Object.assign(
  // Top-level PlasmicStart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabPage: makeNodeComponent("tabPage"),
    title: makeNodeComponent("title"),
    deadline: makeNodeComponent("deadline"),
    next: makeNodeComponent("next"),

    // Metadata about props expected for PlasmicStart
    internalVariantProps: PlasmicStart__VariantProps,
    internalArgProps: PlasmicStart__ArgProps,
  }
);

export default PlasmicStart;
/* prettier-ignore-end */
